The Go Programming Language
An Introduction
14:30 01 Feb 2017
Tags: go golang

Stefan Scheidt
Software Engineer, REWE digital
stefan.scheidt@rewe-digital.com
https://rewe-digital.com/
@stefanscheidt

* The Go Programming Language

"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."

.link http://golang.org

.image assets/gopher.png

.link https://blog.golang.org/gopher The Go Gopher

* Language Origin

- created at Google in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson
- officially announced in November 2009
- Go 1.0 released in March 2012
- with specification of the language and libraries
- current release: 1.7.4

.link https://en.wikipedia.org/wiki/Go_(programming_language) Wikipedia
.link https://golang.org/ref/spec Language specification
.link https://golang.org/doc/faq#Origins golang FAQ

* Why a new language?

Motivated by needs at Google:

-  Efficiency
-  Safety
-  Concurrency
-  Scalability
-  Fast development cycle
-  No surprises

.link https://talks.golang.org/2012/simple.slide#4 "Go: a simple programming environment", Andrew Gerrand

* Why Go at REWE digital?

Many infrastructure tools we use are written in Go

- Consul
- Docker
- Kubernetes
- Prometheus
- ...

.link https://github.com/golang/go/wiki/Projects

Fits well for microservice development

* Go at REWE digital

- Slash
- Tokka
- Guble (https://github.com/smancke/guble)

* Language Fact Sheet

- Deliberately simple C style language design
- statically typed, compiled (fast, cross, small binary)
- a toolchain that, by default, produces statically linked native binaries without external dependencies
- limited structural typing
- no inheritance, but embedding
- no generics
- memory safety, garbage collection
- build-in concurrency (go routines)
- CSP-style concurrent programming (message passing via channels)
- comprehensive standard library

* Hello, World!

.play helloworld/main.go

* Basic Types

`bool`

`string`

`int`, `int8`, `int16`, `int32`, `int64`

`uint`, `uint8`, `uint16`, `uint32`, `uint64`, `uintptr`

`byte` (alias for `uint8`)

`rune` (alias for `int32`, represents a Unicode code point)

`float32` `float64`

`complex64` `complex128`

* Pointers

.play -edit pointers/main.go

* Functions

.play -edit functions/main.go

* Structs

.play -edit structs/main.go

* Methods

.play -edit methods/main.go /START OMIT/,/END OMIT/

* Interfaces (1)

.play -edit interfaces1/main.go /START OMIT/,/END OMIT/

* Interfaces (2)

.code interfaces2/stringer.txt

.play -edit interfaces2/main.go /START OMIT/,/END OMIT/

* Error Handling

.code errors/ioutil.txt

.play -edit errors/main.go /START OMIT/,/END OMIT/

* Go Routines

.play -edit goroutines/main.go /START OMIT/,/END OMIT/

* Channels (1)

.play -edit channels/main.go /START OMIT/,/END OMIT/

* Channels (2)

.code multiplexing/main.go /START say OMIT/,/END say OMIT/

* Channels (3)

.code multiplexing/main.go /START fanIn OMIT/,/END fanIn OMIT/

* Channels (4)

.play -edit multiplexing/main.go /START main OMIT/,/END main OMIT/

* Packages

- Go code lives in packages.
- Packages contain constant, type, function and variable declarations.
- Packages can be very small (package errors has just one declaration) or very large (package net/http has >100 declarations). Most are somewhere in between.
- Case determines visibility: Foo is exported, foo is not.

* Go Standard Library

.link https://golang.org/pkg/

e.g.
- encoding/decoding of various formats
- data-driven templates for generating text and HTML output
- HTTP client and server implementations

* Sample Application

.link https://github.com/stefanscheidt/weatherservice-go Simple Weather Service

* GOPATH and Imports

The GOPATH environment variable lists places to look for Go code.

If DIR is a directory listed in the GOPATH, a package with source in DIR/src/foo/bar can be imported as "foo/bar".

The command "go get" downloads, compiles and installs the packages named by the import paths, along with their dependencies, e.g.

    go get github.com/user/project

.link https://godoc.org/

* Go Package Management

.image assets/picard-facepalm.gif

* Go Tools

Usage:

    go command [arguments]

Commands:

.code gocommands/commands.txt

* Learn Go

.link https://tour.golang.org

.link https://play.golang.org